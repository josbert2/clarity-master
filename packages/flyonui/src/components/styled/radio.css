/* Radio */
.radio {
  --basebg: theme(colors.base-100);
  @apply border-neutral bg-base-100 size-6 cursor-pointer appearance-none rounded-full border;
  &:focus {
    box-shadow: none;
  }
  &:focus-visible {
    @apply outline-neutral/30 outline outline-2 outline-offset-0;
  }
  &:checked,
  &[aria-checked="true"] {
    @apply border-neutral bg-neutral;
    background-image: none;
    animation: radiomark var(--animation-input, 0.1s) ease-out;
    box-shadow:
      0 0 0 3px var(--basebg) inset,
      0 0 0 3px var(--basebg) inset,
      var(--tw-ring-offset-shadow),
      var(--tw-ring-shadow);
  }

  &-primary {
    &:checked,
    &[aria-checked="true"] {
      @apply border-primary bg-primary;

      &:focus-visible {
        @apply outline-primary/30;
      }
    }
  }
  &-secondary {
    &:checked,
    &[aria-checked="true"] {
      @apply border-secondary bg-secondary;

      &:focus-visible {
        @apply outline-secondary/30;
      }
    }
  }
  &-accent {
    &:checked,
    &[aria-checked="true"] {
      @apply border-accent bg-accent;

      &:focus-visible {
        @apply outline-accent/30;
      }
    }
  }

  /* State color */
  &-info {
    &:checked,
    &[aria-checked="true"] {
      @apply border-info bg-info;

      &:focus-visible {
        @apply outline-info/30;
      }
    }
  }
  &-success {
    &:checked,
    &[aria-checked="true"] {
      @apply border-success bg-success;

      &:focus-visible {
        @apply outline-success/30;
      }
    }
  }
  &-warning {
    &:checked,
    &[aria-checked="true"] {
      @apply border-warning bg-warning;

      &:focus-visible {
        @apply outline-warning/30;
      }
    }
  }
  &-error {
    &:checked,
    &[aria-checked="true"] {
      @apply border-error bg-error;

      &:focus-visible {
        @apply outline-error/30;
      }
    }
  }
}
/* Radio inset */
.radio-inset {
  @apply border-neutral size-6 cursor-pointer appearance-none rounded-full border;
  &:focus {
    box-shadow: none;
  }
  &:focus-visible {
    @apply outline-neutral/30 outline outline-2 outline-offset-0;
  }
  &:checked,
  &[aria-checked="true"] {
    @apply bg-base-100 border-neutral border-[6px] shadow-sm;
    background-image: none;
    animation: radioinsetmark var(--animation-input, 0.15s) ease-out;

    &.radio-xs {
      @apply border-4;
    }
    &.radio-sm {
      @apply border-[5px];
    }
    &.radio-lg {
      @apply border-8;
    }
  }
  &-primary {
    &:checked,
    &[aria-checked="true"] {
      @apply border-primary;

      &:focus-visible {
        @apply outline-primary/30;
      }
    }
  }
  &-secondary {
    &:checked,
    &[aria-checked="true"] {
      @apply border-secondary;

      &:focus-visible {
        @apply outline-secondary/30;
      }
    }
  }
  &-accent {
    &:checked,
    &[aria-checked="true"] {
      @apply border-accent;

      &:focus-visible {
        @apply outline-accent/30;
      }
    }
  }

  /* State color */
  &-info {
    &:checked,
    &[aria-checked="true"] {
      @apply border-info;

      &:focus-visible {
        @apply outline-info/30;
      }
    }
  }
  &-success {
    &:checked,
    &[aria-checked="true"] {
      @apply border-success;

      &:focus-visible {
        @apply outline-success/30;
      }
    }
  }
  &-warning {
    &:checked,
    &[aria-checked="true"] {
      @apply border-warning;

      &:focus-visible {
        @apply outline-warning/30;
      }
    }
  }
  &-error {
    &:checked,
    &[aria-checked="true"] {
      @apply border-error;

      &:focus-visible {
        @apply outline-error/30;
      }
    }
  }
}

/* disabled */
.radio,
.radio-inset {
  &.disabled,
  &:disabled,
  &[disabled] {
    @apply pointer-events-none opacity-40;
    &:hover {
      --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(0px + var(--tw-ring-offset-width)) var(--tw-ring-color);
    }
  }
}

/* Radio  */
@keyframes radiomark {
  0% {
    box-shadow:
      0 0 0 9px var(--basebg) inset,
      0 0 0 9px var(--basebg) inset;
  }
  50% {
    box-shadow:
      0 0 0 6px var(--basebg) inset,
      0 0 0 6px var(--basebg) inset;
  }
  100% {
    box-shadow:
      0 0 0 3px var(--basebg) inset,
      0 0 0 3px var(--basebg) inset;
  }
}

/* backward compatibility */
.radio-mark {
  @apply hidden;
}

/* for radio-inset */
@keyframes radioinsetmark {
  0% {
    border-width: 2px;
  }
  50% {
    border-width: 4px;
  }
  100% {
    border-width: 6px;
  }
}

/* backward compatibility */
.radio-inset-mark {
  @apply hidden;
}

/* custom option */
.custom-label-option,
.custom-option {
  @apply border-base-content/25 rounded-box w-full overflow-hidden border p-4 text-center;
  transition:
    border-color 0.15s ease-in-out,
    box-shadow 0.15s ease-in-out;
  &:hover {
    @apply ring-base-content/40 border-base-content/40 ring-1;
  }
  .label {
    @apply p-0 text-base;
    &:first-of-type {
      @apply pb-1;
    }
    .label-text {
      @apply text-base-content/90 font-medium;
    }
  }

  .validate &:has(.radio:invalid),
  &:has(.radio.is-invalid) {
    @apply border-error;
  }
  .validate &:has(.radio:valid),
  &:has(.radio.is-valid) {
    @apply border-success;
  }
}
.custom-option {
  &:has(:checked) {
    @apply ring-primary border-primary ring-1;
  }

  .validate &:has(.radio:valid),
  &:has(.radio.is-valid) {
    &:has(:checked) {
      @apply ring-success border-success;
    }
  }
}

.custom-label-option {
  @apply bg-neutral/10;
  &:has(:checked) {
    @apply ring-primary border-primary bg-primary/20 ring-1;
  }
  .validate &:has(.radio:valid),
  &:has(.radio.is-valid) {
    @apply bg-success/20;
    &:has(:checked) {
      @apply ring-success border-success bg-success/20;
    }
  }

  .validate &:has(.radio:invalid),
  &:has(.radio.is-invalid) {
    @apply bg-error/20;
  }
}

/* State style */
.radio.is-valid,
.validate .radio:valid {
  @apply !border-success hover:!ring-success/10 [@media(hover:hover)]:hover:!border-success;
  &:focus-visible {
    @apply !outline-success/30;
  }
  &:checked,
  &[aria-checked="true"] {
    @apply !border-success !bg-success;
  }
}

.radio.is-invalid,
.validate .radio:invalid {
  @apply !border-error hover:!ring-error/10 [@media(hover:hover)]:hover:!border-error;
  &:focus-visible {
    @apply !outline-error/30;
  }
  &:checked,
  &[aria-checked="true"] {
    @apply !border-error !bg-error;
  }
}

/* Label state */
/* Top text */
.validate .label:has(+ * .radio:valid) > *, /* label sibling child has radio:valid then style label */
.validate .label-text:has(+ * .radio:valid), /* label sibling child has radio:valid then style label-text */
.validate .label-text:has(~ .radio:valid), /* label sibling has radio:valid then style sibling label-text */
.validate .label:has(~ .radio:valid) > *, /* label sibling has radio:valid then style sibling label */
/* Bottom text */
.validate .radio:valid ~ .label, /* label next sibling of radio:valid then style sibling label */
.validate .radio:valid ~ .label-text, /* label next sibling of radio:valid then style sibling label-text */
.validate .radio:valid ~ .label .label-text,  /* label next sibling of radio:valid then style sibling .label label-text */
.validate *:has(.radio:valid) ~ .label, /*  when radio:valid is child then style sibling of that parent label */
.validate *:has(.radio:valid) ~ .label-text, /*  when radio:valid is child then style sibling of that parent label */
.validate *:has(.radio:valid) ~ .label .label-text /*  when radio:valid is child then style sibling of that parent label */ {
  @apply text-success;
}

/* Invalid text style */
/* Top text */
.validate .label:has(+ * .radio:invalid) > *, /* label sibling child has .radio:invalid then style label */
.validate .label-text:has(+ * .radio:invalid), /* label sibling child has .radio:invalid then style label-text */
.validate .label-text:has(~ .radio:invalid), /* label sibling has .radio:invalid then style sibling label-text */
.validate .label:has(~ .radio:invalid) > *, /* label sibling has .radio:invalid then style sibling label */
/* Bottom text */
.validate .radio:invalid ~ .label, /* label next sibling of .radio:invalid then style sibling label */
.validate .radio:invalid ~ .label-text, /* label next sibling of .radio:invalid then style sibling label-text */
.validate .radio:invalid ~ .label .label-text,  /* label next sibling of .radio:invalid then style sibling .label label-text */
.validate *:has(.radio:invalid) ~ .label, /*  when .radio:invalid is child then style sibling of that parent label */
.validate *:has(.radio:invalid) ~ .label-text, /*  when .radio:invalid is child then style sibling of that parent label */
.validate *:has(.radio:invalid) ~ .label .label-text /*  when is-invalid is child then style sibling of that parent label */ {
  @apply text-error;
}

/* Helper text */

/* Valid message display */
.validate *:has(> .radio:valid) ~ .success-message,
.validate *:has(> .radio:valid) > * > .success-message,
/* Both parent. */
.validate .radio:valid ~ .success-message,
.validate .radio:valid + * > .success-message {
  @apply block;
}

/* Invalid message display */
.validate *:has(> .radio:invalid) ~ .error-message,
.validate *:has(> .radio:invalid) > * > .error-message,
/* Both parent. */
.validate .radio:invalid ~ .error-message,
.validate .radio:invalid + * > .error-message {
  @apply block;
}

/* Inset Radio */

.radio-inset.is-valid,
.validate .radio-inset:valid {
  @apply !border-success hover:!ring-success/10 [@media(hover:hover)]:hover:!border-success;
  &:focus-visible {
    @apply !outline-success/30;
  }
  &:checked,
  &[aria-checked="true"] {
    @apply !border-success;
  }
}

.radio-inset.is-invalid,
.validate .radio-inset:invalid {
  @apply !border-error hover:!ring-error/10 [@media(hover:hover)]:hover:!border-error;
  &:focus-visible {
    @apply !outline-error/30;
  }
  &:checked,
  &[aria-checked="true"] {
    @apply !border-error;
  }
}

/* Label state */
/* Top text */
.validate .label:has(+ * .radio-inset:valid) > *, /* label sibling child has radio-inset:valid then style label */
.validate .label:has(+ * .radio-inset:valid).label-text, /* label sibling child has radio-inset:valid then style label-text */
.validate .label:has(~ .radio-inset:valid).label-text, /* label sibling has radio-inset:valid then style sibling label-text */
.validate .label:has(~ .radio-inset:valid) > *, /* label sibling has radio-inset:valid then style sibling label */
/* Bottom text */
.validate .radio-inset:valid ~ .label, /* label next sibling of radio-inset:valid then style sibling label */
.validate .radio-inset:valid ~ .label.label-text, /* label next sibling of radio-inset:valid then style sibling label-text */
.validate .radio-inset:valid ~ .label .label-text,  /* label next sibling of radio-inset:valid then style sibling .label label-text */
.validate *:has(.radio-inset:valid) ~ .label, /*  when radio-inset:valid is child then style sibling of that parent label */
.validate *:has(.radio-inset:valid) ~ .label.label-text, /*  when radio-inset:valid is child then style sibling of that parent label */
.validate *:has(.radio-inset:valid) ~ .label .label-text /*  when radio:valid is child then style sibling of that parent label */ {
  @apply text-success;
}

/* Top text */
.validate .label:has(+ * .radio-inset:invalid) > *, /* label sibling child has .radio-inset:invalid then style label */
.validate .label-text:has(+ * .radio-inset:invalid), /* label sibling child has .radio-inset:invalid then style label-text */
.validate .label-text:has(~ .radio-inset:invalid), /* label sibling has .radio-inset:invalid then style sibling label-text */
.validate .label:has(~ .radio-inset:invalid) > *, /* label sibling has .radio-inset:invalid then style sibling label */
/* Bottom text */
.validate .radio-inset:invalid ~ .label, /* label next sibling of .radio-inset:invalid then style sibling label */
.validate .radio-inset:invalid ~ .label-text, /* label-text next sibling of .radio-inset:invalid then style label-text */
.validate .radio-inset:invalid ~ .label .label-text,  /* label next sibling of .radio-inset:invalid then style sibling .label label-text */
.validate *:has(.radio-inset:invalid) ~ .label, /*  when .radio-inset:invalid is child then style sibling of that parent label */
.validate *:has(.radio-inset:invalid) ~ .label-text, /*  when .radio-inset:invalid is child then style sibling of that parent label */
.validate *:has(.radio-inset:invalid) ~ .label .label-text /*  when is-invalid is child then style sibling of that parent label */ {
  @apply text-error;
}

/* Helper text */

/* Valid message display */
.validate *:has(> .radio-inset:valid) ~ .success-message,
.validate *:has(> .radio-inset:valid) > * > .success-message,
/* Both parent. */
.validate .radio-inset:valid ~ .success-message,
.validate .radio-inset:valid + * > .success-message {
  @apply block;
}

/* Invalid message display */
.validate *:has(> .radio-inset:invalid) ~ .error-message,
.validate *:has(> .radio-inset:invalid) > * > .error-message,
/* Both parent. */
.validate .radio-inset:invalid ~ .error-message,
.validate .radio-inset:invalid + * > .error-message {
  @apply block;
}
