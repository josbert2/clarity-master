.checkbox {
  --chkbg: theme(colors.neutral);
  --chkfg: theme(colors.neutral-content);
  @apply border-base-content/40 rounded-btn bg-base-100 relative size-6 cursor-pointer appearance-none border-[1.5px];

  &:focus {
    box-shadow: none;
  }
  &:focus-visible {
    @apply outline-neutral/30 outline outline-2 outline-offset-0;
  }
  &:checked,
  &[checked="true"],
  &[aria-checked="true"] {
    @apply bg-no-repeat shadow-sm;
    border-color: var(--chkbg);
    animation: checkmark var(--animation-input, 0.2s) ease-out;
    background-color: var(--chkbg);
    background-image: linear-gradient(-45deg, transparent 66%, var(--chkbg) 66.99%),
      linear-gradient(45deg, transparent 77%, var(--chkbg) 77.99%),
      linear-gradient(-45deg, var(--chkbg) 41%, transparent 41.99%),
      linear-gradient(45deg, var(--chkbg) 34%, var(--chkfg) 34.99%, var(--chkfg) 40%, transparent 40.99%),
      linear-gradient(-45deg, var(--chkfg) 47%, var(--chkbg) 47.99%);
  }
  &:indeterminate {
    @apply bg-no-repeat shadow-sm;
    background-color: var(--chkbg);
    border-color: var(--chkbg);
    animation: checkmark var(--animation-input, 0.2s) ease-out;
    background-image: linear-gradient(90deg, transparent 80%, var(--chkbg) 80%),
      linear-gradient(-90deg, transparent 80%, var(--chkbg) 80%),
      linear-gradient(0deg, var(--chkbg) 45%, var(--chkfg) 45%, var(--chkfg) 55%, var(--chkbg) 55%);
  }
  &-primary {
    --chkbg: theme(colors.primary);
    --chkfg: theme(colors.primary-content);
    &:checked,
    &[checked="true"],
    &[aria-checked="true"] {
      &:focus-visible {
        @apply outline-primary/30;
      }
    }
  }
  &-secondary {
    --chkbg: theme(colors.secondary);
    --chkfg: theme(colors.secondary-content);
    &:checked,
    &[checked="true"],
    &[aria-checked="true"] {
      &:focus-visible {
        @apply outline-secondary/30;
      }
    }
  }
  &-accent {
    --chkbg: theme(colors.accent);
    --chkfg: theme(colors.accent-content);
    &:checked,
    &[checked="true"],
    &[aria-checked="true"] {
      &:focus-visible {
        @apply outline-accent/30;
      }
    }
  }

  /* State color */
  &-info {
    --chkbg: theme(colors.info);
    --chkfg: theme(colors.info-content);
    &:checked,
    &[checked="true"],
    &[aria-checked="true"] {
      &:focus-visible {
        @apply outline-info/30;
      }
    }
  }
  &-success {
    --chkbg: theme(colors.success);
    --chkfg: theme(colors.success-content);
    &:checked,
    &[checked="true"],
    &[aria-checked="true"] {
      &:focus-visible {
        @apply outline-success/30;
      }
    }
  }
  &-warning {
    --chkbg: theme(colors.warning);
    --chkfg: theme(colors.warning-content);
    &:checked,
    &[checked="true"],
    &[aria-checked="true"] {
      &:focus-visible {
        @apply outline-warning/30;
      }
    }
  }
  &-error {
    --chkbg: theme(colors.error);
    --chkfg: theme(colors.error-content);
    &:checked,
    &[checked="true"],
    &[aria-checked="true"] {
      &:focus-visible {
        @apply outline-error/30;
      }
    }
  }
  &.disabled,
  &:disabled,
  &[disabled] {
    @apply bg-base-100 pointer-events-none opacity-40;
    &:not(checked) {
      @apply bg-neutral;
    }
  }
}

@keyframes checkmark {
  0% {
    background-position-y: 5px;
  }
  50% {
    background-position-y: -2px;
  }
  100% {
    background-position-y: 0;
  }
}

/* Backward compatibility */
.checkbox-mark {
  @apply hidden;
}

/* State style */
.checkbox.is-valid,
.validate .checkbox:valid {
  --chkbg: theme(colors.success);
  --chkfg: theme(colors.success-content);
  @apply !border-success;
  &:focus-visible {
    @apply !outline-success/30;
  }
}

.checkbox.is-invalid,
.validate .checkbox:invalid {
  --chkbg: theme(colors.error);
  --chkfg: theme(colors.error-content);
  @apply !border-error;
  &:focus-visible {
    @apply !outline-error/30;
  }
}

/* Label state */

/* Top text */
.validate .label:has(+ * .checkbox:valid) > *, /* label sibling child has radio:valid then style label */
.validate .label-text:has(+ * .checkbox:valid), /* label sibling child has radio:valid then style label-text */
.validate .label-text:has(~ .checkbox:valid), /* label sibling has radio:valid then style sibling label-text */
.validate .label:has(~ .checkbox:valid) > *, /* label sibling has radio:valid then style sibling label */
/* Bottom text */
.validate .checkbox:valid ~ .label, /* label next sibling of radio:valid then style sibling label */
.validate .checkbox:valid ~ .label-text, /* label next sibling of radio:valid then style sibling label-text */
.validate .checkbox:valid ~ .label .label-text,  /* label next sibling of radio:valid then style sibling .label label-text */
.validate *:has(.checkbox:valid) ~ .label, /*  when radio:valid is child then style sibling of that parent label */
.validate *:has(.checkbox:valid) ~ .label-text, /*  when radio:valid is child then style sibling of that parent label */
.validate *:has(.checkbox:valid) ~ .label .label-text /*  when radio:valid is child then style sibling of that parent label */ {
  @apply text-success;
}

/* Invalid text style */
/* Top text */
.validate .label:has(+ * .checkbox:invalid) > *, /* label sibling child has .checkbox:invalid then style label */
.validate .label-text:has(+ * .checkbox:invalid), /* label sibling child has .checkbox:invalid then style label-text */
.validate .label-text:has(~ .checkbox:invalid), /* label sibling has .checkbox:invalid then style sibling label-text */
.validate .label:has(~ .checkbox:invalid) > *, /* label sibling has .checkbox:invalid then style sibling label */
/* Bottom text */
.validate .checkbox:invalid ~ .label, /* label next sibling of .checkbox:invalid then style sibling label */
.validate .checkbox:invalid ~ .label-text, /* label next sibling of .checkbox:invalid then style sibling label-text */
.validate .checkbox:invalid ~ .label .label-text,  /* label next sibling of .checkbox:invalid then style sibling .label label-text */
.validate *:has(.checkbox:invalid) ~ .label, /*  when .checkbox:invalid is child then style sibling of that parent label */
.validate *:has(.checkbox:invalid) ~ .label-text, /*  when .checkbox:invalid is child then style sibling of that parent label */
.validate *:has(.checkbox:invalid) ~ .label .label-text /*  when is-invalid is child then style sibling of that parent label */ {
  @apply text-error;
}

/* Helper text */
/* Valid message display */
.validate *:has(> .checkbox:valid) ~ .success-message,
.validate *:has(> .checkbox:valid) > * > .success-message,
/* Both parent. */
.validate .checkbox:valid ~ .success-message,
.validate .checkbox:valid + * > .success-message {
  @apply block;
}

.validate *:has(> .checkbox:invalid) ~ .error-message,
.validate *:has(> .checkbox:invalid) > * > .error-message,
/* Both parent. */
.validate .checkbox:invalid ~ .error-message,
.validate .checkbox:invalid + * > .error-message {
  @apply block;
}
