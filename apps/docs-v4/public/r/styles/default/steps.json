{
  "name": "steps",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "annui/steps.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { createContext } from \"@/registry/default/lib/context\"\n\nconst Steps = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & {\n    asChild?: boolean\n    onFinish?: () => void\n  }\n>(({ asChild, children, onFinish, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n  const [current, setCurrent] = React.useState(0)\n  const [items, setItems] = React.useState<StepItemProps[]>([])\n  const itemsRef = React.useRef<StepItemProps[]>([])\n\n  const next = () => {\n    if (current < items.length - 1) {\n      setCurrent(current + 1)\n    }\n  }\n  const prev = () => {\n    if (current > 0) {\n      setCurrent(current - 1)\n    }\n  }\n  const goTo = (index: number) => {\n    if (index >= 0 && index < items.length) {\n      setCurrent(index)\n    }\n  }\n  const isFirst = current === 0\n  const isLast = current === items.length - 1\n\n  const finish = () => {\n    setCurrent(items.length)\n    onFinish?.()\n  }\n\n  return (\n    <Comp ref={ref} {...props}>\n      <StepProvider\n        value={{\n          current,\n          setCurrent,\n          items,\n          setItems,\n          next,\n          prev,\n          goTo,\n          isFirst,\n          isLast,\n          itemsRef,\n          finish,\n        }}\n      >\n        {children}\n      </StepProvider>\n    </Comp>\n  )\n})\n\nconst StepList = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & { asChild?: boolean }\n>(({ asChild, children, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n  return (\n    <Comp ref={ref} {...props}>\n      {children}\n    </Comp>\n  )\n})\n\nconst StepItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & {\n    asChild?: boolean\n    value: string\n  }\n>(({ asChild, children, value, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n  const { items, setItems, itemsRef } = useStepContext()\n\n  React.useEffect(() => {\n    if (!itemsRef.current.some((item) => item.value === value)) {\n      itemsRef.current.push({ value, index: itemsRef.current.length })\n      const newItems = itemsRef.current.map((item, idx) => ({\n        value: item.value,\n        index: idx,\n      }))\n      setItems(newItems)\n    }\n  }, [])\n\n  return (\n    children && (\n      <Comp ref={ref} {...props}>\n        {children}\n      </Comp>\n    )\n  )\n})\n\nconst StepContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & { asChild?: boolean; value: string }\n>(({ asChild, children, value, ...props }, ref) => {\n  const { current, items } = useStepContext()\n  const Comp = asChild ? Slot : \"div\"\n  return (\n    current === items.find((item) => item.value === value)?.index && (\n      <Comp ref={ref} {...props}>\n        {children}\n      </Comp>\n    )\n  )\n})\nStepContent.displayName = \"StepContent\"\n\nconst StepNotFinishedContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & { asChild?: boolean }\n>(({ asChild, children, ...props }, ref) => {\n  const { current, items } = useStepContext()\n  const Comp = asChild ? Slot : \"div\"\n  return (\n    current < items.length && (\n      <Comp ref={ref} {...props}>\n        {children}\n      </Comp>\n    )\n  )\n})\nStepNotFinishedContent.displayName = \"StepNotFinishedContent\"\n\nconst StepFinishedContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & { asChild?: boolean }\n>(({ asChild, children, ...props }, ref) => {\n  const { current, items } = useStepContext()\n  const Comp = asChild ? Slot : \"div\"\n  return (\n    current === items.length && (\n      <Comp ref={ref} {...props}>\n        {children}\n      </Comp>\n    )\n  )\n})\nStepFinishedContent.displayName = \"StepFinishedContent\"\n\nconst StepFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & { asChild?: boolean }\n>(({ asChild, className, children, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"flex items-center gap-2\", className)}\n      {...props}\n    >\n      {children}\n    </Comp>\n  )\n})\nStepFooter.displayName = \"StepFooter\"\n\nconst StepHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & { asChild?: boolean }\n>(({ asChild, className, children, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n  return (\n    <Comp ref={ref} className={cn(\"flex flex-col gap-1\", className)} {...props}>\n      {children}\n    </Comp>\n  )\n})\nStepHeader.displayName = \"StepHeader\"\n\nconst StepTitle = React.forwardRef<\n  HTMLHeadingElement,\n  React.HTMLAttributes<HTMLHeadingElement> & { asChild?: boolean }\n>(({ asChild, className, children, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"h3\"\n  return (\n    <Comp ref={ref} className={cn(\"text-lg font-medium\", className)} {...props}>\n      {children}\n    </Comp>\n  )\n})\nStepTitle.displayName = \"StepTitle\"\n\nconst StepDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement> & { asChild?: boolean }\n>(({ asChild, className, children, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"p\"\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    >\n      {children}\n    </Comp>\n  )\n})\nStepDescription.displayName = \"StepDescription\"\n\nconst StepNext = React.forwardRef<\n  React.ComponentRef<typeof Button>,\n  React.ComponentPropsWithoutRef<typeof Button>\n>(({ className, children, ...props }, ref) => {\n  const { next, isFirst, isLast, current } = useStepContext()\n  return (\n    <Button\n      className={cn(\"data-[step-is-last=true]:hidden\", className)}\n      data-step-is-first={isFirst}\n      data-step-is-last={isLast}\n      data-step-index={current}\n      ref={ref}\n      onClick={next}\n      {...props}\n    >\n      {children}\n    </Button>\n  )\n})\nStepNext.displayName = \"StepNext\"\n\nconst StepPrev = React.forwardRef<\n  React.ComponentRef<typeof Button>,\n  React.ComponentPropsWithoutRef<typeof Button>\n>(({ className, children, ...props }, ref) => {\n  const { prev, isFirst, isLast, current } = useStepContext()\n  return (\n    <Button\n      className={cn(\"data-[step-is-first=true]:hidden\", className)}\n      data-step-is-first={isFirst}\n      data-step-is-last={isLast}\n      data-step-index={current}\n      ref={ref}\n      onClick={prev}\n      {...props}\n    >\n      {children}\n    </Button>\n  )\n})\nStepPrev.displayName = \"StepPrev\"\n\nconst StepFinish = React.forwardRef<\n  React.ComponentRef<typeof Button>,\n  React.ComponentPropsWithoutRef<typeof Button>\n>(({ className, children, ...props }, ref) => {\n  const { isLast, finish } = useStepContext()\n  return (\n    <Button\n      data-step-is-last={isLast}\n      className={cn(\"data-[step-is-last=false]:hidden\", className)}\n      ref={ref}\n      onClick={finish}\n      {...props}\n    >\n      {children}\n    </Button>\n  )\n})\nStepFinish.displayName = \"StepFinish\"\n\nconst StepCurrent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & { asChild?: boolean }\n>(({ asChild, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n  const { current, items } = useStepContext()\n\n  return (\n    <Comp data-step-finished={current === items.length} ref={ref} {...props}>\n      {current + 1}\n    </Comp>\n  )\n})\nStepCurrent.displayName = \"StepCurrent\"\n\nconst StepTotal = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & { asChild?: boolean }\n>(({ asChild, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n  const { current, items } = useStepContext()\n\n  return (\n    <Comp data-step-finished={current === items.length} ref={ref} {...props}>\n      {items.length}\n    </Comp>\n  )\n})\nStepTotal.displayName = \"StepTotal\"\n\nconst StepReset = React.forwardRef<\n  React.ComponentRef<typeof Button>,\n  React.ComponentPropsWithoutRef<typeof Button>\n>(({ children, ...props }, ref) => {\n  const { setCurrent } = useStepContext()\n\n  return (\n    <Button ref={ref} onClick={() => setCurrent(0)} {...props}>\n      {children}\n    </Button>\n  )\n})\nStepReset.displayName = \"StepReset\"\n\ninterface StepItemProps {\n  value: string\n  index: number\n}\n\ninterface StepContextValue {\n  items: StepItemProps[]\n  setItems: (items: StepItemProps[]) => void\n  current: number\n  setCurrent: (current: number) => void\n  next: () => void\n  prev: () => void\n  goTo: (index: number) => void\n  finish: () => void\n  isFirst: boolean\n  isLast: boolean\n  itemsRef: React.MutableRefObject<StepItemProps[]>\n}\n\nconst [StepProvider, useStepContext] = createContext<StepContextValue>({\n  items: [],\n  setItems: () => {},\n  current: 0,\n  setCurrent: () => {},\n  next: () => {},\n  prev: () => {},\n  goTo: () => {},\n  finish: () => {},\n  isFirst: false,\n  isLast: false,\n  itemsRef: { current: [] as StepItemProps[] },\n})\n\nexport {\n  Steps,\n  StepList,\n  StepItem,\n  StepContent,\n  StepFooter,\n  StepHeader,\n  StepTitle,\n  StepDescription,\n  StepNext,\n  StepPrev,\n  StepFinish,\n  StepCurrent,\n  StepTotal,\n  StepReset,\n  StepFinishedContent,\n  StepNotFinishedContent,\n}\n\nexport { useStepContext }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}